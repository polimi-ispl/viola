classdef TemplateMonoPlugin < audioPlugin

    properties
        f_s = 48000;
        % POTENTIOMETERS PARAMETER
        Volume = 1;
        Enable = 'ON';
    end

    properties ( Constant )
        PluginInterface = audioPluginInterface( ...
            % POTENTIOMETERS GUI
            audioPluginParameter( 'Volume' , ...
                'DisplayName' , 'Volume' , ...
                'DisplayNameLocation' , 'above' , ...
                'Style' , 'rotaryknob' , ...
                'Layout' , % VOLUME LAYOUT , ... 
                'Mapping' , { 'lin' , 0 , 2 } ) , ...
            audioPluginParameter( 'Enable' , ...
                'Style' , 'vrocker' , ...
                'DisplayNameLocation' , 'none' , ...
                'Layout' , % BYPASS LAYOUT , ... 
                'Mapping' , { 'enum' , 'OFF' , 'ON' } ) , ...
            % GRID LAYOUT
            'BackgroundImage' , 'background.png' , ...
            'PluginName' , 'TemplateMonoPlugin' , ...
            'VendorName' , 'ISPL' , ...
            'VendorVersion' , '1.0.0' , ...
            'InputChannels' , 1 , ...
            'OutputChannels' , 1 );
    end

    properties ( Access = private )
        n;
        % TYPE VECTORS
        % CIRCUIT MATRICES DECLARATION
        P; O;
        Z; S; 
        a; b;
        v; v_old; i;
        R_th;
        Rp; 
        tol_SLV;
        tol_DSR;
        R_tol = 10 ^ ( -6 );
    end

    methods
            
        function p = TemplateMonoPlugin
            s = coder.load( 'parsingResults.mat' );
            p.n = length( s.typeOrder );
            % CIRCUIT MATRICES DEFINITION
            p.Rp = s.potRes;
            p.P = s.params;
            p.O = s.outPath;
            p.tol_SLV = s.tolSLV;
            p.tol_DSR = s.tolDSR;
            p.Z = zeros( p.n );
            p.S = zeros( p.n );
            initializeVecs( p );
        end

        function out = process( p , in )
            if strcmp( p.Enable , 'ON' )
                out = processBlock( p , in );                   
            else
                out = in;
            end
        end

        function reset( p )
            p.f_s = getSampleRate( p );
            initializeZ( p );
            initializePots( p );
            initializeVecs( p );
        end

        % POTENTIOMETERS SETTER

        function set.Enable( p , state )
            p.Enable = state;
        end

        function set.Volume( p , value )
            p.Volume = value;
        end

        function initializePots( p )
            % POTENTIOMETERS INITIALIZATION
        end

        function initializeVecs( p )
            p.a = zeros( p.n , 1 );
            p.b = zeros( p.n , 1 );
            p.v = zeros( p.n , 1 );
            p.v_old = p.v + p.tol_SLV;
            p.i = zeros( p.n , 1 );
            p.R_th = ones( p.n , 1 ) + p.tol_DSR;
        end

        function initializeZ( p )
            % LINEAR IMPEDANCES INITIALIZATION
            % NONLINEAR IMPEDANCES INITIALIZATION
        end

        % POTENTIOMETERS UPDATER

        function out = processBlock( p , in )
            blockSize = size( in , 1 );
            out = zeros( blockSize , 1 );
            for ii = 1 : blockSize
                % LINEAR ELEMENTS SCATTERING
                % ITERATIVE SOLVER
                out( ii ) = p.Volume * sum( ( p.a( p.O( : , 1 ) ) + p.b( p.O( : , 1 ) ) ) .* p.O( : , 2 ) ) / 2;
                p.v_old = p.v + p.tol_SLV;
            end   
        end

    end
    
end