close all; 
clearvars; 
clc;

%% ELECTRO HARMONIX OPAMP BIG MUFF PI

addpath( '..\CommonFunctions\' );

%% Import input signal

inputName = 'AudioNorm48000';

[ x_in , f_s ] = audioread( [ 'Input\' , inputName , '.wav' ] );

%% Import ground-truth signal

[ y_GT , ~ ] = audioread( [ 'LTspice\' , inputName , '_LTspice.wav' ] ); 

%% Element parameters

a = 0.0125;
b = 81;
Rtol = 10 ^ ( -6 );

N_ser = 3;
I_s = 4.352 * 10 ^ ( -9 );
eta = N_ser * 1.905; 
V_th = 25.8563 * 10 ^ ( -3 );
R_s = N_ser * 10 ^ ( -3 );
R_p = N_ser * 10 ^ 6;

x = 0.3;
y = 0.7;
z = 0.5;

RVin = 10 ^ ( -9 );
R1 = 10 ^ 6;     
R2 = 56 * 10 ^ 3;      
R3 = 330 * 10 ^ 3;     
R4 = 10 * 10 ^ 3;      
R5 = 47 * 10 ^ 3;   
R6 = 560 * 10 ^ 3;              
R7 = 62 * 10 ^ 3;     
R8 = 47;     
R9 = 8.2 * 10 ^ 3;  
R10 = 470 * 10 ^ 3;
R11 = 5.6 * 10 ^ 3;
R12 = 1.2 * 10 ^ 3;
R13 = 100 * 10 ^ 3;
R14 = 10 * 10 ^ 3;
R15 = 10 * 10 ^ 3;
R16 = 50 * 10 ^ 3;
RG1 = x * R14 + Rtol;
RG2 = ( 1 - x ) * R14 + Rtol;
RT1 = y * R15 + Rtol;
RT2 = ( 1 - y ) * R15 + Rtol;
RL1 = a * ( b ^ z - 1 ) * R16 + Rtol;
RL2 = ( 1 + a ) * ( 1 - b ^ ( z - 1 ) ) * R16 + Rtol;

C1 = 0.15 * 10 ^ ( -6 );
C2 = 0.01 * 10 ^ ( -6 );
C3 = 4.7 * 10 ^ ( -9 );
C4 = 10 * 10 ^ ( -6 );
C5 = 4.7 * 10 ^ ( -6 );
C6 = 150 * 10 ^ ( -12 );
C7 = 10 ^ ( -6 );
C8 = 0.1 * 10 ^ ( -6 );
C9 = 0.12 * 10 ^ ( -6 );

port_nl = 18;
node_nl_1 = 13;
node_nl_2 = 14;
pos_C = [ 3 , 6 , 8 , 9 , 10 , 12 , 26 , 29 , 30 ];

%% Adaptation conditions (Norton equivalent conductances)

G_Deq = 0;
G_Vin = 1 / RVin;
G_R1 = 1 / R1;
G_R2 = 1 / R2;
G_R3 = 1 / R3;
G_R4 = 1 / R4;
G_R5 = 1 / R5;
G_R6 = 1 / R6;
G_R7 = 1 / R7;
G_R8 = 1 / R8;
G_R9 = 1 / R9;
G_R10 = 1 / R10;
G_R11 = 1 / R11;
G_R12 = 1 / R12;
G_R13 = 1 / R13;
G_RG1 = 1 / RG1;
G_RG2 = 1 / RG2;
G_RT1 = 1 / RT1;
G_RT2 = 1 / RT2;
G_RL1 = 1 / RL1;
G_RL2 = 1 / RL2;
G_C1 = 2 * C1 * f_s;
G_C2 = 2 * C2 * f_s;
G_C3 = 2 * C3 * f_s;
G_C4 = 2 * C4 * f_s;
G_C5 = 2 * C5 * f_s;
G_C6 = 2 * C6 * f_s;
G_C7 = 2 * C7 * f_s;
G_C8 = 2 * C8 * f_s;
G_C9 = 2 * C9 * f_s;

%% Reference port resistances/conductances matrix

Z = diag( 1 ./ [ G_R9 , G_RL1 , G_C3 , G_R6 , G_R3 , G_C2 , G_R7 , G_C6 , G_C8 , G_C7 , G_Vin , G_C1 , G_RG1 , G_R8 , G_RT1 , ...
                 G_R11 , G_Deq , G_R12 , G_R2 , G_R4 , G_R5 , G_R10 , G_R1 , G_RT2 , G_RG2 , G_C5 , G_R13 , G_RL2 , G_C9 , G_C4 ] );

G = diag( [ G_Vin, G_R1, G_C1, G_R2, G_R3, G_R4, G_R5, G_C2, G_C3, G_R6, G_R7, G_C4, G_R8, G_RG1, G_RG2, ...
            G_C5, G_R9, G_Deq, G_R10, G_C6, G_C7, G_C8, G_R11, G_R12, G_C9, G_RT1, G_RT2, G_RL1, G_RL2, G_R13 ] );

G_r = G;
G_r( port_nl , : ) = [ ];
G_r( : , port_nl ) = [ ];

%% Incidence matrix

A = [ 1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  1, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, -1, -1,  0,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, -1,  0,  0, -1,  0,  0,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0, -1,  0;
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  1, -1;
     -1,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  1 ];

A_r = A;
A_r( node_nl_2 , : ) = [ ];
A_r( : , port_nl ) = [ ];

U = [ 0, 0, 0, -1, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1;
      0, 0, 0,  0, 0, 0, -1, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1;
      0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1 ]';

U_r = U;
U_r( node_nl_2 , : ) = [ ];

O = [ 0, 0, 1, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1;
      0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0;
      0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1 ];

O_r = O;
O_r( : , node_nl_2 ) = [ ];

H = [ 0, 0, 0;
      0, 0, 0;
      0, 0, 0 ];

%% Fundamental loop matrices

F_V = [ 0,	0,	0,	0,	0, 0, 0,  0,  0,  1,  0,  0,  0,  0;
        0,	0,	0,	0,	0, 0, 0,  0,  0,  0, -1, -1,  0,  0;
        0,	0,	0, -1,	1, 0, 0,  0,  0,  0,  0,  0,  0,  0;
        0,	0,	0,	1, -1, 0, 0,  0, -1,  0,  0,  0,  0,  0;
        0,	0,	0, -1,	0, 0, 0,  0,  0,  0,  0,  0,  0,  0;
        0,	0,	0,	1,	0, 0, 0,  0,  0,  1,  0,  0,  0,  1;
        0,	0,	0,	0,	0, 0, 0,  0, -1, -1,  0,  0,  0, -1;
       -1, -1,	0,	0,	0, 1, 0,  0,  0,  0,  0, -1,  1,  0;
        0,	1,	0,	0,	0, 0, 0,  1,  0,  0,  0,  0,  0,  0;
        0,	0,	0,	0,	0, 0, 0, -1,  0,  0,  0,  1, -1,  0;
        0,	0, -1,	0,	0, 0, 1,  0,  0,  0,  0,  0,  0,  0;
        0,	0,	1,	0,	0, 0, 0,  0,  0,  0,  0,  0,  0,  0;
        0,	0,	0,	0,	0, 0, 0,  0, -1, -1,  0,  0,  0,  0;
        0,	0,	0,	0,	0, 0, 0,  0,  1,  1,  0,  0,  0,  0;
        0,	0,	0,	0,	0, 0, 0, -1,  0,  0,  0,  1,  0,  0;
        0,	0,	0,	0,	0, 0, 0,  1,  0,  0,  0, -1,  1,  0 ];

B_V = [ -F_V' , eye( 14 ) ];

F_I = [ 0, 0,  0,  0, 0, 0,	0,  0,	0,	1,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0,	0,	0,	0, -1, -1,	0,	0;
        0, 0,  0, -1, 1, 0,	0,	0,	0,	0,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0,	0, -1, -1,	0,	0,	0, -1;
        0, 0, -1,  0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0;
        0, 0,  0,  0, 1, 0,	0,	0,	0,	0,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0,	0, -1, -1,	0,	0,	0, -1;
       -1, 0,  0,  0, 0, 1,	0,	0,	0,	1,	0,	0,	0,	0;
        0, 1,  0,  0, 0, 0,	0,	1,	0,	0,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0, -1,	0,	0,	0,	1, -1,	0;
        0, 0, -1,  0, 0, 0,	1,	0,	0,	0,	0,	0,	0,	0;
        0, 0,  1,  0, 0, 0,	0,	0,	0,	0,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0,	0, -1, -1,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0,  0,	1,	1,	0,	0,	0,	0;
        0, 0,  0,  0, 0, 0,	0, -1,	0,	0,	0,	1,	0,	0;
        0, 0,  0,  0, 0, 0,	0,  1,	0,	0,	0, -1,	1,	0 ];

B_I = [ -F_I' , eye( 14 ) ];

%% R-type junction adaptation

Y_r_inv = inv( A_r * G_r * A_r' );

M_r_inv = inv( H - O_r * Y_r_inv * U_r );

Z_r = Y_r_inv * ( eye( size( A_r , 1 ) ) + U_r * M_r_inv * O_r * Y_r_inv );

Z( 17 , 17 ) = Z_r( node_nl_1 , node_nl_1 );

%% Number of samples/elements

L = length( x_in );
N = size( G , 1 );

%% Scattering matrix

S = eye( N ) - 2 * Z * B_I' * ( ( B_V * Z * B_I' ) \ B_V );

%% WDF initialization

a = zeros( N , 1 );
b = zeros( N , 1 );

y_out = zeros( L , 1 );

%% WDF simulation

time = tic;

k = 0;

while ( k < L )

    k = k + 1;

    b( 11 ) = x_in( k );
    b( pos_C ) = a( pos_C );

    b( 17 ) = antiExtSchockleyDiodeScat( S( 17 , : ) * b , Z( 17 , 17 ) , I_s , eta , V_th , R_s , R_p );

    a = S * b;
    
    y_out( k ) = - 0.5 * ( a( 2 ) + b( 2 ) );

end

time = toc( time );

disp( [ 'Simulation time: ' , num2str( time ) ] );

%% Write output file

audiowrite( [ 'Output\' , inputName , '_WDF.wav' ] , y_out , f_s );

%% Output plot

plotGroundTruthWDF( y_out , y_GT , f_s , 'V' );

%% RTR

RTR = time * f_s / L;

disp( [ 'RTR: ' , num2str( RTR ) ] );
